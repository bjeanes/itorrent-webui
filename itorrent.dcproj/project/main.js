/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

var listController = {
    // This object acts as a controller for the list UI.
    // It implements the dataSource methods for the list.
    
    numberOfRows: function() {
        // The List calls this dataSource method to find out how many rows should be in the list.
        console.log('getting torrent list length');
        return torrentList.torrents.length;
    },
    
    prepareRow: function(rowElement, rowIndex, templateElements) {
        // The List calls this dataSource method for every row.  templateElements contains references to all elements inside the template that have an id. We use it to fill in the text of the rowTitle element.
        if (templateElements.name) {
            templateElements.name.innerText = torrentList.torrents[rowIndex][2];
        }

        // We also assign an onclick handler that will cause the browser to go to the detail page.
        var self = this;
        var handler = function() {
            var torrent = torrentList.torrents[rowIndex];
            detailController.setTorrent(torrent);
            var browser = document.getElementById('browser').object;
            browser.goForward(document.getElementById('detailLevel'), torrent[2]);
        };
        rowElement.onclick = handler;
    }
};

var detailController = {
    // This object acts as a controller for the detail UI.
    
    setTorrent: function(torrent) {
        this._torrent = torrent;        
    }    
};

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function load()
{
    torrentList.loadData();
    dashcode.setupParts();
}

// Sample data.  Some applications may have static data like this, but most will want to use information fetched remotely via XMLHttpRequest.
var torrentList = {
    torrents: [],
    loadData: function() {
        // Values you provide
        var feedURL = "http://192.168.0.15:1337/gui/?list=1"; // The feed to fetch

        // XMLHttpRequest setup code
        var xmlRequest = new XMLHttpRequest();
        xmlRequest.onload = function() { torrentList.loadDataFinished(xmlRequest); };
        xmlRequest.open("GET", feedURL, true, "admin", "admin");
        xmlRequest.setRequestHeader("Cache-Control", "no-cache");
        xmlRequest.send(null);
    },
    loadDataFinished: function(xmlRequest) {
        if (xmlRequest.status == 200) {
            console.log('torrent list received');
            var items = eval('('+xmlRequest.responseText + ')');
            this.torrents = items['torrents'];
            document.getElementById('torrentList').object.reloadData();
        }
        else {
            alert("Error fetching data: HTTP status " + xmlRequest.status);
        }
    }
};
