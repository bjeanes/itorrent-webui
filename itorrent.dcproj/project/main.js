/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */
 
var fetchURL = "http://192.168.0.15:1337/gui/";

var listController = {
    // This object acts as a controller for the list UI.
    // It implements the dataSource methods for the list.
    
    numberOfRows: function() {
        // The List calls this dataSource method to find out how many rows should be in the list.
        console.log('getting torrent list length');
        return torrentSource.torrents.length;
    },
    
    prepareRow: function(rowElement, rowIndex, tmp) {
        var torrent = torrentSource.torrents[rowIndex];
        tmp.name.innerText = torrent.name;
        tmp.progressBar.object.setValue(torrent.progress);
        tmp.percent.innerText = torrent.progress + "%";
        tmp.downSpd.innerText = torrent.downSpd;
        tmp.upSpd.innerText = torrent.upSpd;

        // We also assign an onclick handler that will cause the browser to go to the detail page.
        var self = this;
        var handler = function() {
            detailController.setTorrent(torrent);
            var browser = document.getElementById('browser').object;
            browser.goForward(document.getElementById('detailLevel'), torrent.name);
        };
        rowElement.onclick = handler;
    }
};

var detailController = {
    // This object acts as a controller for the detail UI.
    
    setTorrent: function(torrent) {
        this._torrent = torrent;
        this._representedObject = torrent;
        
        detailListController.setTorrent(torrent);
        torrent.loadFiles();
        
        document.getElementById('detailName').innerText = torrent.name;
        document.getElementById('detailProgressBar').object.setValue(torrent.progress);   
        document.getElementById('detailInfo').innerText = "D: " + torrent.downSpd + " U: " + torrent.upSpd;
        document.getElementById('detailPercent').innerText = torrent.progress + " %";
        
        var startBtn = document.getElementById('startButton').object;
        
        if(torrent.isQueued() && !torrent.isStarted()) {
            startBtn.setText('Force Start');
            startBtn.onclick = torrent.forceStart;
        } else startBtn.onclick = torrent.start;
    }   
};

// Sample data.  Some applications may have static data like this, but most will want to use information fetched remotely via XMLHttpRequest.
var torrentSource = {
    build: 0,
    cache_id: '',
    torrents: [],
    labels: [],
    loadData: function() {
        // Values you provide
        var feedURL = fetchURL + "?list=1"; // The feed to fetch

        // XMLHttpRequest setup code
        var xmlRequest = new XMLHttpRequest();
        xmlRequest.onload = function() { torrentSource.loadDataFinished(xmlRequest); };
        xmlRequest.open("GET", feedURL, true, "admin", "admin");
        xmlRequest.setRequestHeader("Cache-Control", "no-cache");
        xmlRequest.send(null);
    },
    loadDataFinished: function(xmlRequest) {
        var list = document.getElementById('torrentList').object
        if (xmlRequest.status == 200) {
            console.log('torrent list received');
            var data      = eval('('+xmlRequest.responseText + ')');
            for(i in data['torrents']) {
                this.torrents[i] = new Torrent(data['torrents'][i]);
            }
            this.cache_id = data['torrentc'];
            this.labels   = data['label'];
            this.build    = data['build'];
            list.reloadData();
        }
        else {
            alert("Error fetching data: HTTP status " + xmlRequest.status);
        }
    }
};

function Torrent(tArr)
{
    this.files = [];
    this.hash = tArr[0];
    this.status = tArr[1];
    this.name = tArr[2];
    this.size = tArr[3]; // in bytes
    this.progress = tArr[4] / 10.0;
    this.downloaded = tArr[5]; // in bytes
    this.uploaded = tArr[6];   // in bytes
    this.ratio = tArr[7] / 10.0;
    this.downSpd = (Math.round(tArr[8]/102.4)/10).toString() + " KB/s"; // bytes/second
    this.upSpd = (Math.round(tArr[9]/102.4)/10).toString() + " KB/s"; // bytes/second
    this.eta = tArr[10]; // seconds
    this.label = tArr[11];
    this.peersConnected = tArr[12];
    this.peersAvailable = tArr[13];
    this.seedsConnected = tArr[14];
    this.seedsAvailable = tArr[15];
    this.availability = tArr[16]; // 1/65535ths
    this.order = tArr[17];
    this.remaining = tArr[18];
    
    this.start = function(){};
    this.forceStart = function(){};
    
    this.isStarted  = function() { return 0 != (this.status & 1); };
    this.isChecking = function() { return 0 != (this.status & 2); };
    this.isStarting_after_check = 
                      function() { return 0 != (this.status & 4); };
    this.isChecked  = function() { return 0 != (this.status & 8); };
    this.isError    = function() { return 0 != (this.status & 16); };
    this.isPaused   = function() { return 0 != (this.status & 32); };
    this.isQueued   = function() { 
        return 0 != (this.status & 64); };
    this.isLoaded   = function() { return 0 != (this.status & 128); };
    
    this.loadFiles = function() {
        var feedURL = fetchURL + "?action=getfiles&hash="+this.hash; // The feed to fetch

        // XMLHttpRequest setup code
        var self = this;
        var xmlRequest = new XMLHttpRequest();
        xmlRequest.onload = function() { 
            var fileList = document.getElementById('torrentFileList');
            var files    = eval('('+xmlRequest.responseText + ')')['files'];
            self.files   = files[1];
            
            fileList.object.reloadData();
        };
        xmlRequest.open("GET", feedURL, true, "admin", "admin");
        xmlRequest.setRequestHeader("Cache-Control", "no-cache");
        xmlRequest.send(null);
    };
    
    this.loadFilesFinished = function(xmlRequest) {

    }
}

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function load()
{
    dashcode.setupParts();
    torrentSource.loadData();
}

// This object implements the dataSource methods for the list.
var detailListController = {
    _torrent: {files: []},
    
    setTorrent: function(torrent) {
        this._torrent = torrent;
    },
	
	// The List calls this method to find out how many rows should be in the list.
	numberOfRows: function() {
		return this._torrent.files.length;
	},
	
	// The List calls this method once for every row.
	prepareRow: function(rowElement, rowIndex, templateElements) {
		// templateElements contains references to all elements that have an id in the template row.
		// Ex: set the value of an element with id="label".
		if (templateElements.detailFileName) {
			templateElements.detailFileName.innerText = this._torrent.files[rowIndex][0];
		}

		// Assign a click event handler for the row.
		//rowElement.onclick = function(event) {

		//};
	}
};
